
PRINCIPIO DE SEGREGACION DE INTERFACES

La segregación significa mantener las cosas separadas, y el Principio de Segregación de Interfaces 
se trata de separar las interfaces.

El principio establece que muchas interfaces específicas del cliente son mejores que una interfaz de 
propósito general. No se debe obligar a los clientes a implementar una función que no necesitan.

EJEMPLO:
-------
Tenemos una interface ESTACIONAMIENTO, con funcionalidad a implementar muy simplificada. 
Es el tipo de estacionamiento donde se paga una tarifa por hora. Y luego se considerará implementar 
un estacionamiento que sea gratuito.

Vea la interfaz "IEstacionamiento" y su implementación en la clase "EstacionamientoGratis".

Nuestra interfaz de estacionamiento se componía de 2 cosas: 
- lógica relacionada con el estacionamiento (estacionar el coche, sacarlo, obtener capacidad del estacionamiento)
- y lógica relacionada con el pago.

Pero es demasiado específico. Debido a eso, la clase EstacionamientoGratis se vio obligada a implementar
métodos relacionados con el pago que son irrelevantes. Entónces aplicamos el principio de segregación de interfaces.

Vea el archivo "DiagramaClasesPSI.png".

Hemos separado el estacionamiento. Con este nuevo modelo, incluso podemos ir más allá y dividir 
EstacionamientoPagado para admitir diferentes tipos de pago.

Ahora el modelo es mucho más flexible, extensible y los clientes no necesitan implementar ninguna lógica
irrelevante porque solo proporcionamos funcionalidad relacionada con el estacionamiento en la interfaz del IEstacionamiento.